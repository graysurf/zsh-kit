#compdef git-scope

_git-scope() {
  typeset -a subcommands
  subcommands=(
    'tracked:Show all tracked files (filtered by prefix, supports -p)'
    'staged:Show staged files (index contents, supports -p)'
    'modified:Show modified files (not yet staged, supports -p)'
    'all:Show all changed files (staged + modified, supports -p)'
    'untracked:Show untracked files (not added to Git, supports -p)'
    'commit:Inspect a specific commit (metadata, file list, and optionally file contents)'
    'help:Display help message for git-scope'
  )

  _arguments -C \
    '1:command:->subcmds' \
    '*::arg:->args'

  case $state in
    subcmds)
      _describe -t commands 'git-scope subcommand' subcommands && return 0
      ;;
    args)
      case "${words[1]}" in
        commit)
          typeset -a commit_hashes
          if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
            commit_hashes=( ${(f)"$(git log --pretty=format:'%h:%s' -n 20 2>/dev/null)"} )
          else
            commit_hashes=( )
          fi
          _arguments \
            '--print[Print contents of each file in the commit (from HEAD or working tree)]' \
            '-p[Print contents of each file in the commit (from HEAD or working tree)]' \
            '1:commit hash:_describe "commit hash" commit_hashes' && return 0
          ;;
        tracked|staged|modified|all|untracked)
          _arguments \
            '--print[Print the contents of each file]' \
            '-p[Print the contents of each file]' \
            '*:prefix:_files -/' && return 0
          ;;
      esac
      ;;
  esac
}

compdef _git-scope git-scope
compdef _git-scope 'git-scope.git'
